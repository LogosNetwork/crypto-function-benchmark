#include <iostream>
#include "SignatureTestUtils.h"
//using namespace std;

//Zilliqa Schnorr
#include "/home/peng/workspace_openssl/signature_test/src/libCrypto/MultiSig.h"

//openssl ECDSA
#include <string.h>
#include <openssl/ec.h>      // for EC_GROUP_new_by_curve_name, EC_GROUP_free, EC_KEY_new, EC_KEY_set_group, EC_KEY_generate_key, EC_KEY_free
#include <openssl/ecdsa.h>   // for ECDSA_do_sign, ECDSA_do_verify
#include <openssl/obj_mac.h> // for NID_secp192k1
#include <openssl/evp.h>
#include <openssl/sha.h>

#define NUM_NODES 				32
#define NUM_ROUNDS				1000
#define MULTI_SIG_MSG_SIZE		512
#define MAX_DIGEST_LEN			32

namespace CryptoPerfTest
{
//int string_sizes[] = {128, 256, 512, 1024, 1024*2, 1024*4, 1024*8, 1024*16, 1024*32, 1024*64, 1024*128, 1024*256, 1024*512, 1024*1024};
int string_sizes[] = {512};

void handleErrors(const char * s)
{
	cout << s << " error" << endl;
	exit(-1);
}

class ECDSA_Test
{
public:
	EC_KEY *eckey;

	vector<string> messages;
	int rounds;

	ECDSA_Test(int rounds)
	: eckey(EC_KEY_new())
	, messages()
	, rounds(rounds)
	{
		if (NULL == eckey)
			handleErrors("Failed to create new EC Key");

		EC_GROUP *ecgroup= EC_GROUP_new_by_curve_name(NID_secp256k1);
		if (NULL == ecgroup)
			handleErrors("EC_GROUP_new_by_curve_name error");

		if(1 != EC_KEY_set_group(eckey,ecgroup))
			handleErrors("EC_KEY_set_group error");

		if(1 != EC_KEY_generate_key(eckey))
			handleErrors("EC_KEY_generate_key error");
	}

	ECDSA_SIG * sign(string & msg)
	{
		unsigned char digest[MAX_DIGEST_LEN];
		SHA256((unsigned char *)msg.data(), msg.size(), digest);
		ECDSA_SIG *signature = ECDSA_do_sign(digest, MAX_DIGEST_LEN, eckey);
		if (NULL == signature)
			handleErrors("ECDSA_do_sign error");
		return signature;
	}

	clock_t sign(int size)
	{

		SignatureTestUtils::getStrings(size, rounds, messages);

		clock_t t_start = clock();
		for(auto &msg : messages)
		{
			ECDSA_SIG * sig = sign(msg);
			ECDSA_SIG_free(sig);
		}
		return clock() - t_start;
	}

	void verify(string &msg, ECDSA_SIG *signature)
	{
		unsigned char digest[MAX_DIGEST_LEN];
		SHA256((unsigned char *)msg.data(), msg.size(), digest);

		if (1 != ECDSA_do_verify(digest, MAX_DIGEST_LEN, signature, eckey))
			handleErrors("ECDSA_do_verify");
	}

	clock_t verify(int size)
	{
		SignatureTestUtils::getStrings(size, rounds, messages);
		vector<ECDSA_SIG *> sigs;

		for(int i = 0;i < rounds; ++i)
		{
			auto &msg = messages[i];
			sigs.push_back(sign(msg));
		}

		clock_t t_start = clock();
		for(int i = 0;i < rounds; ++i)
		{
			auto &msg = messages[i];
			auto &sig = sigs[i];
			verify(msg, sig);
		}
		return clock() - t_start;
	}
};
}

int main( int argc , char * argv[] )
{
	CryptoPerfTest::ECDSA_Test ecdsa(NUM_ROUNDS);

	for(auto size : CryptoPerfTest::string_sizes)
	{
		auto t = ecdsa.sign(size);
		cout << "ecdsa sign: msg_size=" << size << " time(ms)=" << CryptoPerfTest::SignatureTestUtils::ticks2ms(t, NUM_ROUNDS) << endl;
		t = ecdsa.verify(size);
		cout << "ecdsa verify: msg_size=" << size << " time(ms)=" << CryptoPerfTest::SignatureTestUtils::ticks2ms(t, NUM_ROUNDS) << endl;
	}
    cout << "done" << endl;
    return 0 ;
}


//
//static int create_signature(unsigned char* hash, int hash_len)
//{
//    int function_status = -1;
//    EC_KEY *eckey=EC_KEY_new();
//    if (NULL == eckey)
//    {
//        printf("Failed to create new EC Key\n");
//        function_status = -1;
//    }
//    else
//    {
//        EC_GROUP *ecgroup= EC_GROUP_new_by_curve_name(NID_secp256k1);
//        if (NULL == ecgroup)
//        {
//            printf("Failed to create new EC Group\n");
//            function_status = -1;
//        }
//        else
//        {
//            int set_group_status = EC_KEY_set_group(eckey,ecgroup);
//            const int set_group_success = 1;
//            if (set_group_success != set_group_status)
//            {
//                printf("Failed to set group for EC Key\n");
//                function_status = -1;
//            }
//            else
//            {
//                const int gen_success = 1;
//                int gen_status = EC_KEY_generate_key(eckey);
//                if (gen_success != gen_status)
//                {
//                    printf("Failed to generate EC Key\n");
//                    function_status = -1;
//                }
//                else
//                {
//                    ECDSA_SIG *signature = ECDSA_do_sign(hash, hash_len, eckey);
//                    if (NULL == signature)
//                    {
//                        printf("Failed to generate EC Signature\n");
//                        function_status = -1;
//                    }
//                    else
//                    {
//
//                        int verify_status = ECDSA_do_verify(hash, hash_len, signature, eckey);
//                        const int verify_success = 1;
//                        if (verify_success != verify_status)
//                        {
//                            printf("Failed to verify EC Signature\n");
//                            function_status = -1;
//                        }
//                        else
//                        {
//                            printf("Verifed EC Signature\n");
//                            function_status = 1;
//                        }
//                    }
//                }
//            }
//            EC_GROUP_free(ecgroup);
//        }
//        EC_KEY_free(eckey);
//    }
//
//    return function_status;
//}
//    vector<unsigned char> message;
//    message.push_back('a');
//    vector<Signature> sigs;
//    init(NUM_NODES);
//
//	sign(message, sigs);
//	verify(message, sigs);
//
//    auto apk = AggregatePubKeys(pkeys);
//    genCommitPoints();
//    auto acp = AggregateCommits(commitPoints);
//    Challenge challenge(*acp, *apk, message);
//    genResponse(challenge);
//    VerifyResponse(challenge);
//    auto ars = AggregateResponses(responses);
//    auto asig = AggregateSign(challenge, *ars);
//
//    if(!Schnorr::GetInstance().Verify(message, *asig, *apk))
//    	handleErrors("schnorr.Verify");
